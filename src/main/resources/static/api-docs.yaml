openapi: 3.0.0
info:
  version: 0.1.0
  title: CopyMus webservices
servers:
  - url: https://grfia.dlsi.ua.es/copymus
    description: Production server
  - url: http://localhost:8090
    description: Development server
paths:
  /scores/{db}/{id}:
    get:
      summary: Returns a score from a database
      tags:
        - Score management
      parameters:
        - name: db
          in: path
          description: Database to get the score from. Currently only "primus" is available.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the score
          required: true
          schema:
            type: string
      responses:
        '200':
          description: JSON with the score data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Score or database does not exist
  /scores/{db}/{id}/annotate:
    post:
      summary: Stores an annotation for the score.
      tags:
        - Score management
      parameters:
        - name: db
          in: path
          description: Database to get the score from. Currently only "primus" is available.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the score
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                image:
                  type: string
                  format: binary
                interactions:
                  type: string
                  format: binary
      responses:
        '201':
          description: Annotation successfully created
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Score, database, or user does not exist
  /scores/{db}/{id}/invalidate:
    post:
      summary: Marks a score as invalid.
      tags:
        - Score management
      parameters:
        - name: db
          in: path
          description: Database to get the score from. Currently only "primus" is available.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the score
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
          application/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      responses:
        '200':
          description: Score invalidated
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Score or database does not exist
  /scores/{db}/{user}/pending:
    get:
      summary: Returns a random score
      tags:
        - Score management
      parameters:
        - name: db
          in: path
          description: Database to get the score from. Currently only "primus" is available.
          required: true
          schema:
            type: string
        - name: user
          in: path
          description: ID of the user that is going to annotate the score
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: JSON with the score data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: User or database does not exist
  /scores/{db}/{id}/{user}:
    get:
      summary: Returns the annotations for a given score and user
      tags:
        - Score management
      parameters:
        - name: db
          in: path
          description: Database to get the score from. Currently only "primus" is available.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the score
          required: true
          schema:
            type: string
        - name: user
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: JSON with the annotation data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Score, database, or user does not exist
  /users:
    get:
      summary: Lists all registered users
      tags:
        - User management
      responses:
        '200':
          description: JSON array with users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Creates a new user
      tags:
        - User management
      description: username must be unique (case-insensitive)
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: User already exists
  /users/{id}:
    get:
      summary: Returns a user given its ID
      tags:
        - User management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: User does not exist
    put:
      summary: Changes the username
      tags:
        - User management
      description: username must be unique (case-insensitive)
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Username changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: User does not exist
        '409':
          description: User already exists
    delete:
      summary: Deletes a user given its ID
      tags:
        - User management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: User does not exist
  /users/{id}/annotations:
    get:
      summary: Lists all annotations performed by the user
      tags:
        - User management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: JSON array with score ids
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnnotationSummary"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
components:
  schemas:
    Score:
      required:
        - id
        - title
        - author
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        pdf:
          type: string
          format: byte
        midi:
          type: string
          format: byte
    Annotation:
      properties:
        scoreId:
          type: string
        userId:
          type: integer
          format: int64
        image:
          type: string
          format: byte
        interactions:
          type: string
          format: byte
    AnnotationSummary:
      properties:
        db:
          type: string
        scoreId:
          type: string
        userId:
          type: integer
          format: int64
        url:
          type: string
    User:
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
security:
  - ApiKeyAuth: []
